//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GimpySoftwareNewTemplate.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GimpyDataEntities : DbContext
    {
        public GimpyDataEntities()
            : base("name=GimpyDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Campaign> Campaigns { get; set; }
        public virtual DbSet<CampaignActivity> CampaignActivities { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<DefaultGenre> DefaultGenres { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<ResetPassword> ResetPasswords { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
    
        [DbFunction("GimpyDataEntities", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[GimpyDataEntities].[fn_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual int AddCampaignActivity(Nullable<int> companyId, Nullable<int> campaignId, Nullable<int> statusId, string note, Nullable<System.DateTime> date)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("CampaignId", campaignId) :
                new ObjectParameter("CampaignId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCampaignActivity", companyIdParameter, campaignIdParameter, statusIdParameter, noteParameter, dateParameter);
        }
    
        public virtual int AddCompanyGenre(Nullable<int> companyId, Nullable<int> genreID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var genreIDParameter = genreID.HasValue ?
                new ObjectParameter("GenreID", genreID) :
                new ObjectParameter("GenreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCompanyGenre", companyIdParameter, genreIDParameter);
        }
    
        public virtual int AddNewCompaign(string name, string description, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCompaign", nameParameter, descriptionParameter, useridParameter);
        }
    
        public virtual int AddNewCompany(string name, Nullable<int> categoryId, string email, string phoneNumber, string contactName, string addressLine1, string addressLine2, string townCity, string county, string postcode, string country, string notes, Nullable<bool> active, Nullable<int> userId, string website, string region)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var townCityParameter = townCity != null ?
                new ObjectParameter("TownCity", townCity) :
                new ObjectParameter("TownCity", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("Postcode", postcode) :
                new ObjectParameter("Postcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCompany", nameParameter, categoryIdParameter, emailParameter, phoneNumberParameter, contactNameParameter, addressLine1Parameter, addressLine2Parameter, townCityParameter, countyParameter, postcodeParameter, countryParameter, notesParameter, activeParameter, userIdParameter, websiteParameter, regionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CampaignCount(Nullable<int> userid, string status)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CampaignCount", useridParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> checkemail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkemail", emailParameter);
        }
    
        public virtual ObjectResult<CheckEmailExists_Result> CheckEmailExists(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckEmailExists_Result>("CheckEmailExists", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckExistingCompany(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckExistingCompany", nameParameter);
        }
    
        public virtual ObjectResult<CheckExistingCompanyWithID_Result> CheckExistingCompanyWithID(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckExistingCompanyWithID_Result>("CheckExistingCompanyWithID", nameParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckExistingCompanyWithUser(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckExistingCompanyWithUser", nameParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckExists", nameParameter);
        }
    
        public virtual ObjectResult<CheckResetpassword_Result> CheckResetpassword(string randomno)
        {
            var randomnoParameter = randomno != null ?
                new ObjectParameter("randomno", randomno) :
                new ObjectParameter("randomno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckResetpassword_Result>("CheckResetpassword", randomnoParameter);
        }
    
        public virtual int DeleteCampaign(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCampaign", idParameter);
        }
    
        public virtual int DeleteCompaniesFromCampaign(Nullable<int> campaignID, Nullable<int> companyID)
        {
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompaniesFromCampaign", campaignIDParameter, companyIDParameter);
        }
    
        public virtual int DeleteCompany(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompany", idParameter);
        }
    
        public virtual int DeleteCompanyGenre(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompanyGenre", companyIdParameter);
        }
    
        public virtual int DeleteFromResetpassword(string randomno)
        {
            var randomnoParameter = randomno != null ?
                new ObjectParameter("randomno", randomno) :
                new ObjectParameter("randomno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFromResetpassword", randomnoParameter);
        }
    
        public virtual ObjectResult<findata_sort_Result> findata_sort(string name, string country, string region, string categories, string genres, Nullable<int> userid, string sortby, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<findata_sort_Result>("findata_sort", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter, sortbyParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<FindCampaign_Result> FindCampaign(string name, Nullable<int> userid, string status, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCampaign_Result>("FindCampaign", nameParameter, useridParameter, statusParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<FindCampaignCompanies_Result> FindCampaignCompanies(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCampaignCompanies_Result>("FindCampaignCompanies", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FindCampaignCount(string name, Nullable<int> userid, string status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FindCampaignCount", nameParameter, useridParameter, statusParameter);
        }
    
        public virtual ObjectResult<FindCampaignsCompanies_Result> FindCampaignsCompanies(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCampaignsCompanies_Result>("FindCampaignsCompanies", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<FindCampaignSort_Result> FindCampaignSort(string name, Nullable<int> userid, string status, string sortby, string sorttype, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var sorttypeParameter = sorttype != null ?
                new ObjectParameter("sorttype", sorttype) :
                new ObjectParameter("sorttype", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCampaignSort_Result>("FindCampaignSort", nameParameter, useridParameter, statusParameter, sortbyParameter, sorttypeParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FindCompaniesByCampaigns(Nullable<int> campaignID)
        {
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FindCompaniesByCampaigns", campaignIDParameter);
        }
    
        public virtual ObjectResult<FindData_Result> FindData(string name, string country, string region, string categories, string genres, Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindData_Result>("FindData", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<FindData_Active_Result> FindData_Active(string name, string country, string region, string categories, string genres, Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindData_Active_Result>("FindData_Active", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<FindData_Active_Sort_Result> FindData_Active_Sort(string name, string country, string region, string categories, string genres, Nullable<int> userid, string sortby, Nullable<int> from, Nullable<int> to)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindData_Active_Sort_Result>("FindData_Active_Sort", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter, sortbyParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<FindData_count_Result> FindData_count(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindData_count_Result>("FindData_count", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<FindData_countActive_Result> FindData_countActive(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindData_countActive_Result>("FindData_countActive", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetAllCampaignByUserID_Result> GetAllCampaignByUserID(Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCampaignByUserID_Result>("GetAllCampaignByUserID", useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetAllCampaignStatus_Result> GetAllCampaignStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCampaignStatus_Result>("GetAllCampaignStatus");
        }
    
        public virtual ObjectResult<GetAllCompaign_Result> GetAllCompaign(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompaign_Result>("GetAllCompaign", useridParameter);
        }
    
        public virtual ObjectResult<GetAllCompanyByID_Result> GetAllCompanyByID(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompanyByID_Result>("GetAllCompanyByID", useridParameter);
        }
    
        public virtual ObjectResult<GetAllCompanyByUserID_Result> GetAllCompanyByUserID(Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompanyByUserID_Result>("GetAllCompanyByUserID", useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetAllCompanyGenresByUserID_Result> GetAllCompanyGenresByUserID(Nullable<int> userid, Nullable<int> cid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompanyGenresByUserID_Result>("GetAllCompanyGenresByUserID", useridParameter, cidParameter);
        }
    
        public virtual ObjectResult<string> getallgenre()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getallgenre");
        }
    
        public virtual ObjectResult<string> GetAllGenreByUserID(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllGenreByUserID", useridParameter);
        }
    
        public virtual ObjectResult<string> getallgenres()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getallgenres");
        }
    
        public virtual ObjectResult<GetAllGenresByUserID_Result> GetAllGenresByUserID(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllGenresByUserID_Result>("GetAllGenresByUserID", useridParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveCampaign_Result> GetAllInActiveCampaign(Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveCampaign_Result>("GetAllInActiveCampaign", useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveCompany_Result> GetAllInActiveCompany(Nullable<int> userid, Nullable<int> from, Nullable<int> to)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveCompany_Result>("GetAllInActiveCompany", useridParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveCompany1_Result> GetAllInActiveCompany1(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveCompany1_Result>("GetAllInActiveCompany1", useridParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveCompanyByUserID_Result> GetAllInActiveCompanyByUserID(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveCompanyByUserID_Result>("GetAllInActiveCompanyByUserID", useridParameter);
        }
    
        public virtual ObjectResult<GetCampaignByID_Result> GetCampaignByID(Nullable<int> campaignId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("CampaignId", campaignId) :
                new ObjectParameter("CampaignId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCampaignByID_Result>("GetCampaignByID", campaignIdParameter);
        }
    
        public virtual ObjectResult<GetCampaignCompanies_Result> GetCampaignCompanies(Nullable<int> campaignID, Nullable<int> from, Nullable<int> to)
        {
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCampaignCompanies_Result>("GetCampaignCompanies", campaignIDParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCampaignCompaniesCount(Nullable<int> campaignID)
        {
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCampaignCompaniesCount", campaignIDParameter);
        }
    
        public virtual ObjectResult<GetCampaignDataByID_Result> GetCampaignDataByID(Nullable<int> userid, Nullable<int> id)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCampaignDataByID_Result>("GetCampaignDataByID", useridParameter, idParameter);
        }
    
        public virtual ObjectResult<GetCategory_Result> GetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategory_Result>("GetCategory");
        }
    
        public virtual ObjectResult<GetCategoryByUser_Result> GetCategoryByUser(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryByUser_Result>("GetCategoryByUser", useridParameter);
        }
    
        public virtual ObjectResult<GetCompanyByID_Result> GetCompanyByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyByID_Result>("GetCompanyByID", idParameter);
        }
    
        public virtual ObjectResult<GetCompanyDetailByID_Result> GetCompanyDetailByID(Nullable<int> id, Nullable<int> userid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDetailByID_Result>("GetCompanyDetailByID", idParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCompanyID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompanyID");
        }
    
        public virtual ObjectResult<Nullable<int>> getcurrentuserid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getcurrentuserid");
        }
    
        public virtual ObjectResult<getgenrebyuserid_Result> getgenrebyuserid(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getgenrebyuserid_Result>("getgenrebyuserid", useridParameter);
        }
    
        public virtual ObjectResult<Getpassword_Result> Getpassword(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Getpassword_Result>("Getpassword", emailParameter);
        }
    
        public virtual ObjectResult<GetUserIDByEmail_Result> GetUserIDByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserIDByEmail_Result>("GetUserIDByEmail", emailParameter);
        }
    
        public virtual int InsertCompaniesToCampaign(Nullable<int> campaignID, Nullable<int> companyID)
        {
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCompaniesToCampaign", campaignIDParameter, companyIDParameter);
        }
    
        public virtual int insertgenrebyuser(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertgenrebyuser", nameParameter, useridParameter);
        }
    
        public virtual int InsertIntoResetpassword(string email, string randomno, Nullable<System.DateTime> expiretime)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var randomnoParameter = randomno != null ?
                new ObjectParameter("randomno", randomno) :
                new ObjectParameter("randomno", typeof(string));
    
            var expiretimeParameter = expiretime.HasValue ?
                new ObjectParameter("expiretime", expiretime) :
                new ObjectParameter("expiretime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoResetpassword", emailParameter, randomnoParameter, expiretimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoginCheck(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoginCheck", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> LoginCheckEncrypt(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LoginCheckEncrypt", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoginVerify(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoginVerify", emailParameter);
        }
    
        public virtual int RegisterUser(string email, string password, string lastName, string firstName, string country, string bandArtist, string company)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var bandArtistParameter = bandArtist != null ?
                new ObjectParameter("BandArtist", bandArtist) :
                new ObjectParameter("BandArtist", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterUser", emailParameter, passwordParameter, lastNameParameter, firstNameParameter, countryParameter, bandArtistParameter, companyParameter);
        }
    
        public virtual ObjectResult<SortCampaign_Result> SortCampaign(Nullable<int> userid, string sortby, string sorttype, string status, Nullable<int> from, Nullable<int> to)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var sorttypeParameter = sorttype != null ?
                new ObjectParameter("sorttype", sorttype) :
                new ObjectParameter("sorttype", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortCampaign_Result>("SortCampaign", useridParameter, sortbyParameter, sorttypeParameter, statusParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SortContact_Result> SortContact(Nullable<int> userid, string sortby, string status, Nullable<int> from, Nullable<int> to, string sorttype)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(int));
    
            var sorttypeParameter = sorttype != null ?
                new ObjectParameter("sorttype", sorttype) :
                new ObjectParameter("sorttype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortContact_Result>("SortContact", useridParameter, sortbyParameter, statusParameter, fromParameter, toParameter, sorttypeParameter);
        }
    
        public virtual int UpdateCampaign(Nullable<int> id, string name, string description, Nullable<int> userid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCampaign", idParameter, nameParameter, descriptionParameter, useridParameter);
        }
    
        public virtual int UpdateCompanyByID(Nullable<int> id, string name, Nullable<int> catid, string email, string phone, string contact, string address1, string address2, string towncity, string country, string postcode, string notes, Nullable<bool> active, string website, string region)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var towncityParameter = towncity != null ?
                new ObjectParameter("towncity", towncity) :
                new ObjectParameter("towncity", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("postcode", postcode) :
                new ObjectParameter("postcode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCompanyByID", idParameter, nameParameter, catidParameter, emailParameter, phoneParameter, contactParameter, address1Parameter, address2Parameter, towncityParameter, countryParameter, postcodeParameter, notesParameter, activeParameter, websiteParameter, regionParameter);
        }
    
        public virtual int updateCompanyGenre(Nullable<int> companyId, Nullable<int> genreID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var genreIDParameter = genreID.HasValue ?
                new ObjectParameter("GenreID", genreID) :
                new ObjectParameter("GenreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCompanyGenre", companyIdParameter, genreIDParameter);
        }
    
        public virtual int UpdateGenreByCompanyID(Nullable<int> cid, string genres)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGenreByCompanyID", cidParameter, genresParameter);
        }
    
        public virtual ObjectResult<GetAllActiveContacts_Result> GetAllActiveContacts(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveContacts_Result>("GetAllActiveContacts", useridParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveContacts_Result> GetAllInActiveContacts(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveContacts_Result>("GetAllInActiveContacts", useridParameter);
        }
    
        public virtual ObjectResult<Find_Contacts_Result> Find_Contacts(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Find_Contacts_Result>("Find_Contacts", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<FindActive_Contacts_Result> FindActive_Contacts(string name, string country, string region, string categories, string genres, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(string));
    
            var genresParameter = genres != null ?
                new ObjectParameter("genres", genres) :
                new ObjectParameter("genres", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindActive_Contacts_Result>("FindActive_Contacts", nameParameter, countryParameter, regionParameter, categoriesParameter, genresParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetAllInActiveCampaigns_Result> GetAllInActiveCampaigns(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInActiveCampaigns_Result>("GetAllInActiveCampaigns", useridParameter);
        }
    
        public virtual ObjectResult<string> GetRegionByCountry(Nullable<int> userid, string country)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRegionByCountry", useridParameter, countryParameter);
        }
    
        public virtual ObjectResult<string> GetCountryByUser(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCountryByUser", useridParameter);
        }
    
        public virtual ObjectResult<GetAllActiveCampaigns_Result> GetAllActiveCampaigns(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveCampaigns_Result>("GetAllActiveCampaigns", useridParameter);
        }
    }
}
